// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: file.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (
  file_id,
  bucket_id,
  owner,
  name,
  size,
  file_type
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, file_id, bucket_id, owner, name, size, favourite, file_type, last_modified, created_at
`

type CreateFileParams struct {
	FileID   string    `json:"file_id"`
	BucketID string    `json:"bucket_id"`
	Owner    uuid.UUID `json:"owner"`
	Name     string    `json:"name"`
	Size     string    `json:"size"`
	FileType string    `json:"file_type"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.FileID,
		arg.BucketID,
		arg.Owner,
		arg.Name,
		arg.Size,
		arg.FileType,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.BucketID,
		&i.Owner,
		&i.Name,
		&i.Size,
		&i.Favourite,
		&i.FileType,
		&i.LastModified,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files
WHERE file_id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, fileID string) error {
	_, err := q.db.Exec(ctx, deleteFile, fileID)
	return err
}

const getFile = `-- name: GetFile :one
SELECT id, file_id, bucket_id, owner, name, size, favourite, file_type, last_modified, created_at FROM files
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRow(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.BucketID,
		&i.Owner,
		&i.Name,
		&i.Size,
		&i.Favourite,
		&i.FileType,
		&i.LastModified,
		&i.CreatedAt,
	)
	return i, err
}

const listFiles = `-- name: ListFiles :many
SELECT id, file_id, bucket_id, owner, name, size, favourite, file_type, last_modified, created_at FROM files
WHERE owner = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListFilesParams struct {
	Owner  uuid.UUID `json:"owner"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListFiles(ctx context.Context, arg ListFilesParams) ([]File, error) {
	rows, err := q.db.Query(ctx, listFiles, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.BucketID,
			&i.Owner,
			&i.Name,
			&i.Size,
			&i.Favourite,
			&i.FileType,
			&i.LastModified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :one
UPDATE files
  set name = $2
WHERE id = $1
RETURNING id, file_id, bucket_id, owner, name, size, favourite, file_type, last_modified, created_at
`

type UpdateFileParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, updateFile, arg.ID, arg.Name)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.BucketID,
		&i.Owner,
		&i.Name,
		&i.Size,
		&i.Favourite,
		&i.FileType,
		&i.LastModified,
		&i.CreatedAt,
	)
	return i, err
}
